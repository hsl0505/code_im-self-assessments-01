{"numFailedTestSuites":1,"numFailedTests":8,"numPassedTestSuites":0,"numPassedTests":5,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":1,"numTotalTests":13,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1574218566589,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["tree map"],"failureMessages":[],"fullName":"tree map should exist on the Tree prototype","location":null,"status":"passed","title":"should exist on the Tree prototype"},{"ancestorTitles":["tree map"],"failureMessages":[],"fullName":"tree map should be a function","location":null,"status":"passed","title":"should be a function"},{"ancestorTitles":["tree map"],"failureMessages":[],"fullName":"tree map should return a Tree instance","location":null,"status":"passed","title":"should return a Tree instance"},{"ancestorTitles":["tree map"],"failureMessages":[],"fullName":"tree map should return a new Tree instance, not the existing one (depth 0)","location":null,"status":"passed","title":"should return a new Tree instance, not the existing one (depth 0)"},{"ancestorTitles":["tree map"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Tree {\u001b[22m\n\u001b[31m+   \"addChild\": [Function anonymous],\u001b[39m\n\u001b[2m    \"children\": Array [\u001b[22m\n\u001b[2m      Tree {\u001b[22m\n\u001b[2m        \"children\": Array [],\u001b[22m\n\u001b[2m        \"value\": \"child1\",\u001b[22m\n\u001b[2m      },\u001b[22m\n\u001b[2m      Tree {\u001b[22m\n\u001b[2m        \"children\": Array [],\u001b[22m\n\u001b[2m        \"value\": \"child2\",\u001b[22m\n\u001b[2m      },\u001b[22m\n\u001b[2m    ],\u001b[22m\n\u001b[31m+   \"map\": [Function anonymous],\u001b[39m\n\u001b[2m    \"value\": \"root\",\u001b[22m\n\u001b[2m  }\u001b[22m\n    at Object.toEqual (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/tree-map/tree-map.test.js:49:20)\n    at Object.asyncJestTest (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at resolve (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:73:41)\n    at process._tickCallback (internal/process/next_tick.js:68:7)"],"fullName":"tree map should return a new Tree instance, not the existing one (depth 1)","location":null,"status":"failed","title":"should return a new Tree instance, not the existing one (depth 1)"},{"ancestorTitles":["tree map"],"failureMessages":[],"fullName":"tree map should return an identical tree when the map function is identity (depth 0)","location":null,"status":"passed","title":"should return an identical tree when the map function is identity (depth 0)"},{"ancestorTitles":["tree map"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mnot\u001b[2m.\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: not \u001b[32m{\"children\": [], \"value\": 2}\u001b[39m\n    at toBe (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/tree-map/tree-map.test.js:6:22)\n    at verifyTree (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/tree-map/tree-map.test.js:10:5)\n    at Object.verifyTree (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/tree-map/tree-map.test.js:82:5)\n    at Object.asyncJestTest (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at resolve (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:73:41)\n    at process._tickCallback (internal/process/next_tick.js:68:7)"],"fullName":"tree map should return an identical tree when the map function is identity (depth 1)","location":null,"status":"failed","title":"should return an identical tree when the map function is identity (depth 1)"},{"ancestorTitles":["tree map"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mnot\u001b[2m.\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: not \u001b[32m{\"children\": [{\"children\": [], \"value\": 4}, {\"children\": [], \"value\": 5}], \"value\": 2}\u001b[39m\n    at toBe (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/tree-map/tree-map.test.js:6:22)\n    at verifyTree (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/tree-map/tree-map.test.js:10:5)\n    at Object.verifyTree (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/tree-map/tree-map.test.js:104:5)\n    at Object.asyncJestTest (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at resolve (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:73:41)\n    at process._tickCallback (internal/process/next_tick.js:68:7)"],"fullName":"tree map should return an identical tree when the map function is identity (depth 2)","location":null,"status":"failed","title":"should return an identical tree when the map function is identity (depth 2)"},{"ancestorTitles":["tree map"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mnot\u001b[2m.\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: not \u001b[32m{\"children\": [{\"children\": [{\"children\": [], \"value\": 9}], \"value\": 4}, {\"children\": [], \"value\": 5}], \"value\": 2}\u001b[39m\n    at toBe (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/tree-map/tree-map.test.js:6:22)\n    at verifyTree (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/tree-map/tree-map.test.js:10:5)\n    at Object.verifyTree (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/tree-map/tree-map.test.js:129:5)\n    at Object.asyncJestTest (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at resolve (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:73:41)\n    at process._tickCallback (internal/process/next_tick.js:68:7)"],"fullName":"tree map should return an identical tree when the map function is identity (depth 3)","location":null,"status":"failed","title":"should return an identical tree when the map function is identity (depth 3)"},{"ancestorTitles":["tree map"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m1\u001b[39m\n    at toEqual (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/tree-map/tree-map.test.js:5:24)\n    at Object.verifyTree (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/tree-map/tree-map.test.js:143:5)\n    at Object.asyncJestTest (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at resolve (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:73:41)\n    at process._tickCallback (internal/process/next_tick.js:68:7)"],"fullName":"tree map should return a tree with doubled values if the function doubles the value (depth 0)","location":null,"status":"failed","title":"should return a tree with doubled values if the function doubles the value (depth 0)"},{"ancestorTitles":["tree map"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m1\u001b[39m\n    at toEqual (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/tree-map/tree-map.test.js:5:24)\n    at Object.verifyTree (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/tree-map/tree-map.test.js:163:5)\n    at Object.asyncJestTest (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at resolve (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:73:41)\n    at process._tickCallback (internal/process/next_tick.js:68:7)"],"fullName":"tree map should return a tree with doubled values if the function doubles the value (depth 1)","location":null,"status":"failed","title":"should return a tree with doubled values if the function doubles the value (depth 1)"},{"ancestorTitles":["tree map"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m1\u001b[39m\n    at toEqual (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/tree-map/tree-map.test.js:5:24)\n    at Object.verifyTree (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/tree-map/tree-map.test.js:193:5)\n    at Object.asyncJestTest (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at resolve (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:73:41)\n    at process._tickCallback (internal/process/next_tick.js:68:7)"],"fullName":"tree map should return a tree with doubled values if the function doubles the value (depth 2)","location":null,"status":"failed","title":"should return a tree with doubled values if the function doubles the value (depth 2)"},{"ancestorTitles":["tree map"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m1\u001b[39m\n    at toEqual (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/tree-map/tree-map.test.js:5:24)\n    at Object.verifyTree (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/tree-map/tree-map.test.js:229:5)\n    at Object.asyncJestTest (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at resolve (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/hyunsung/바탕화면/codestates/im-self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:73:41)\n    at process._tickCallback (internal/process/next_tick.js:68:7)"],"fullName":"tree map should return a tree with doubled values if the function doubles the value (depth 3)","location":null,"status":"failed","title":"should return a tree with doubled values if the function doubles the value (depth 3)"}],"endTime":1574218567483,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mtree map › should return a new Tree instance, not the existing one (depth 1)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[2m  Tree {\u001b[22m\n    \u001b[31m+   \"addChild\": [Function anonymous],\u001b[39m\n    \u001b[2m    \"children\": Array [\u001b[22m\n    \u001b[2m      Tree {\u001b[22m\n    \u001b[2m        \"children\": Array [],\u001b[22m\n    \u001b[2m        \"value\": \"child1\",\u001b[22m\n    \u001b[2m      },\u001b[22m\n    \u001b[2m      Tree {\u001b[22m\n    \u001b[2m        \"children\": Array [],\u001b[22m\n    \u001b[2m        \"value\": \"child2\",\u001b[22m\n    \u001b[2m      },\u001b[22m\n    \u001b[2m    ],\u001b[22m\n    \u001b[31m+   \"map\": [Function anonymous],\u001b[39m\n    \u001b[2m    \"value\": \"root\",\u001b[22m\n    \u001b[2m  }\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 47 | \u001b[39m    }\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 48 | \u001b[39m    \u001b[36mvar\u001b[39m result \u001b[33m=\u001b[39m root\u001b[33m.\u001b[39mmap(identity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 49 | \u001b[39m    expect(result)\u001b[33m.\u001b[39mtoEqual(root)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                   \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 50 | \u001b[39m    expect(result\u001b[33m.\u001b[39mchildren[\u001b[35m0\u001b[39m])\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBe(child1)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 51 | \u001b[39m    expect(result\u001b[33m.\u001b[39mchildren[\u001b[35m1\u001b[39m])\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBe(child2)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 52 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toEqual (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:49:20)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mtree map › should return an identical tree when the map function is identity (depth 1)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mnot\u001b[2m.\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: not \u001b[32m{\"children\": [], \"value\": 2}\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 4 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mtoBeInstanceOf(\u001b[33mTree\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 5 | \u001b[39m  expect(result\u001b[33m.\u001b[39mvalue)\u001b[33m.\u001b[39mtoEqual(expectation\u001b[33m.\u001b[39mvalue)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 6 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBe(expectation)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m   | \u001b[39m                     \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 7 | \u001b[39m  expect(result\u001b[33m.\u001b[39mchildren)\u001b[33m.\u001b[39mtoHaveLength(expectation\u001b[33m.\u001b[39mchildren\u001b[33m.\u001b[39mlength)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 8 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 9 | \u001b[39m  \u001b[36mfor\u001b[39m (\u001b[36mvar\u001b[39m i \u001b[33m=\u001b[39m \u001b[35m0\u001b[39m\u001b[33m;\u001b[39m i \u001b[33m<\u001b[39m result\u001b[33m.\u001b[39mchildren\u001b[33m.\u001b[39mlength\u001b[33m;\u001b[39m i\u001b[33m++\u001b[39m) {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat toBe (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:6:22)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat verifyTree (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:10:5)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.verifyTree (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:82:5)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mtree map › should return an identical tree when the map function is identity (depth 2)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mnot\u001b[2m.\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: not \u001b[32m{\"children\": [{\"children\": [], \"value\": 4}, {\"children\": [], \"value\": 5}], \"value\": 2}\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 4 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mtoBeInstanceOf(\u001b[33mTree\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 5 | \u001b[39m  expect(result\u001b[33m.\u001b[39mvalue)\u001b[33m.\u001b[39mtoEqual(expectation\u001b[33m.\u001b[39mvalue)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 6 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBe(expectation)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m   | \u001b[39m                     \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 7 | \u001b[39m  expect(result\u001b[33m.\u001b[39mchildren)\u001b[33m.\u001b[39mtoHaveLength(expectation\u001b[33m.\u001b[39mchildren\u001b[33m.\u001b[39mlength)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 8 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 9 | \u001b[39m  \u001b[36mfor\u001b[39m (\u001b[36mvar\u001b[39m i \u001b[33m=\u001b[39m \u001b[35m0\u001b[39m\u001b[33m;\u001b[39m i \u001b[33m<\u001b[39m result\u001b[33m.\u001b[39mchildren\u001b[33m.\u001b[39mlength\u001b[33m;\u001b[39m i\u001b[33m++\u001b[39m) {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat toBe (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:6:22)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat verifyTree (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:10:5)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.verifyTree (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:104:5)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mtree map › should return an identical tree when the map function is identity (depth 3)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mnot\u001b[2m.\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: not \u001b[32m{\"children\": [{\"children\": [{\"children\": [], \"value\": 9}], \"value\": 4}, {\"children\": [], \"value\": 5}], \"value\": 2}\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 4 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mtoBeInstanceOf(\u001b[33mTree\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 5 | \u001b[39m  expect(result\u001b[33m.\u001b[39mvalue)\u001b[33m.\u001b[39mtoEqual(expectation\u001b[33m.\u001b[39mvalue)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 6 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBe(expectation)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m   | \u001b[39m                     \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 7 | \u001b[39m  expect(result\u001b[33m.\u001b[39mchildren)\u001b[33m.\u001b[39mtoHaveLength(expectation\u001b[33m.\u001b[39mchildren\u001b[33m.\u001b[39mlength)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 8 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 9 | \u001b[39m  \u001b[36mfor\u001b[39m (\u001b[36mvar\u001b[39m i \u001b[33m=\u001b[39m \u001b[35m0\u001b[39m\u001b[33m;\u001b[39m i \u001b[33m<\u001b[39m result\u001b[33m.\u001b[39mchildren\u001b[33m.\u001b[39mlength\u001b[33m;\u001b[39m i\u001b[33m++\u001b[39m) {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat toBe (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:6:22)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat verifyTree (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:10:5)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.verifyTree (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:129:5)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mtree map › should return a tree with doubled values if the function doubles the value (depth 0)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m2\u001b[39m\n    Received: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 3 | \u001b[39m\u001b[36mconst\u001b[39m verifyTree \u001b[33m=\u001b[39m \u001b[36mfunction\u001b[39m(result\u001b[33m,\u001b[39m expectation) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 4 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mtoBeInstanceOf(\u001b[33mTree\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 5 | \u001b[39m  expect(result\u001b[33m.\u001b[39mvalue)\u001b[33m.\u001b[39mtoEqual(expectation\u001b[33m.\u001b[39mvalue)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m   | \u001b[39m                       \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 6 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBe(expectation)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 7 | \u001b[39m  expect(result\u001b[33m.\u001b[39mchildren)\u001b[33m.\u001b[39mtoHaveLength(expectation\u001b[33m.\u001b[39mchildren\u001b[33m.\u001b[39mlength)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 8 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat toEqual (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:5:24)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.verifyTree (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:143:5)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mtree map › should return a tree with doubled values if the function doubles the value (depth 1)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m2\u001b[39m\n    Received: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 3 | \u001b[39m\u001b[36mconst\u001b[39m verifyTree \u001b[33m=\u001b[39m \u001b[36mfunction\u001b[39m(result\u001b[33m,\u001b[39m expectation) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 4 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mtoBeInstanceOf(\u001b[33mTree\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 5 | \u001b[39m  expect(result\u001b[33m.\u001b[39mvalue)\u001b[33m.\u001b[39mtoEqual(expectation\u001b[33m.\u001b[39mvalue)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m   | \u001b[39m                       \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 6 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBe(expectation)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 7 | \u001b[39m  expect(result\u001b[33m.\u001b[39mchildren)\u001b[33m.\u001b[39mtoHaveLength(expectation\u001b[33m.\u001b[39mchildren\u001b[33m.\u001b[39mlength)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 8 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat toEqual (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:5:24)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.verifyTree (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:163:5)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mtree map › should return a tree with doubled values if the function doubles the value (depth 2)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m2\u001b[39m\n    Received: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 3 | \u001b[39m\u001b[36mconst\u001b[39m verifyTree \u001b[33m=\u001b[39m \u001b[36mfunction\u001b[39m(result\u001b[33m,\u001b[39m expectation) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 4 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mtoBeInstanceOf(\u001b[33mTree\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 5 | \u001b[39m  expect(result\u001b[33m.\u001b[39mvalue)\u001b[33m.\u001b[39mtoEqual(expectation\u001b[33m.\u001b[39mvalue)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m   | \u001b[39m                       \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 6 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBe(expectation)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 7 | \u001b[39m  expect(result\u001b[33m.\u001b[39mchildren)\u001b[33m.\u001b[39mtoHaveLength(expectation\u001b[33m.\u001b[39mchildren\u001b[33m.\u001b[39mlength)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 8 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat toEqual (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:5:24)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.verifyTree (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:193:5)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mtree map › should return a tree with doubled values if the function doubles the value (depth 3)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m2\u001b[39m\n    Received: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 3 | \u001b[39m\u001b[36mconst\u001b[39m verifyTree \u001b[33m=\u001b[39m \u001b[36mfunction\u001b[39m(result\u001b[33m,\u001b[39m expectation) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 4 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mtoBeInstanceOf(\u001b[33mTree\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 5 | \u001b[39m  expect(result\u001b[33m.\u001b[39mvalue)\u001b[33m.\u001b[39mtoEqual(expectation\u001b[33m.\u001b[39mvalue)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m   | \u001b[39m                       \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 6 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBe(expectation)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 7 | \u001b[39m  expect(result\u001b[33m.\u001b[39mchildren)\u001b[33m.\u001b[39mtoHaveLength(expectation\u001b[33m.\u001b[39mchildren\u001b[33m.\u001b[39mlength)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 8 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat toEqual (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:5:24)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.verifyTree (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:229:5)\u001b[2m\u001b[22m\n","name":"/home/hyunsung/바탕화면/codestates/im-self-assessments-01/tree-map/tree-map.test.js","startTime":1574218566973,"status":"failed","summary":""}],"wasInterrupted":false}